{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"neo-cli \uf0c1 Agnostic Orchestration Tools for Openstack Installation \uf0c1 Python Version \uf0c1 neo-cli only support Python 3 or newer. Don't worry if you don't have Python3 installed. It's save to install Python3 alongside Python2. Both have different installation location. You can get python3 from your distro (GNU/Linux distribution) repository. $ sudo apt-get install python3 Use python3 instead of python when you want to use python3. which help you tell you what program you are using (e.g which python3 ) pip \uf0c1 Get the pip for python3 with the following steps $ curl -O https://bootstrap.pypa.io/get-pip.py $ sudo python3 get-pip.py Then use pip with pip3 . Another way is to get it from your distro repository $ sudo apt-get install python3-pip Virtual environments \uf0c1 We strongly recommend using virtual environments to manage dependencies of your project. $ sudo apt-get install python3-venv Make new virtual environments with $ python3 -m venv yourvenvname Active the venv (virtual environments) with $ source yourvenvname/bin/activate Check if it's activated with $ which python3 If the output point to yourvenvname location. Then you are set. Deactivate venv with $ deactivate Dependencies \uf0c1 Dependencies are located in requirements.txt Grab those dependencies with $ pip3 install -r requirements.txt Install neo-cli \uf0c1 pip3 install -e . Test if NEO installed correctly neo --help If you get the help output from neo. Then you are ready to have fun. Usage \uf0c1 You can list all NEO command with help $ neo --help Authentication \uf0c1 Use neo login to log in. neo logout to do the opposite. Creation \uf0c1 $ neo create NEO creates neo.yml for you if it doesn't find one. Then it will guide you trough questions to do the right job for you. It will ask you the 'stack' and 'template' you want to create. Then fill 'key-pairs' and 'network' configuration. The last step is to setup your 'vm' where you are asked to choose 'image name' and 'flavor'. When you sure with the configuration. Hit 'y/yes' to continue to deploy. List your stuffs \uf0c1 $ neo ls --help stack List all the stacks vm List all virtual machines network List all network e.g neo ls stack Remove your stuffs \uf0c1 $ neo rm It will delete your stack, network and machine Update \uf0c1 $ neo update Use update to see your changes. Attach \uf0c1 Attach local standard input, output, and error streams to a running stack or virtual machine $ neo attach vm neo attach will read neo.yml configuration automatically if you didn't pass the of your vm. You can also specify your running vm id manually with $ neo attach vm <your-vm-id> Troubleshooting \uf0c1 Unable to locate package python3-venv \uf0c1 Try to check the python3 venv module name provided by your distro $ apt-cache search python3 | grep venv The results python3-venv - pyvenv-3 binary for python3 (default python3 version) python3.5-venv - Interactive high-level object-oriented language (pyvenv binary, version 3.5) It might be differ on your machine. So please make sure you get the correct name. No command 'neo' found \uf0c1 Make sure you virtual environments is activated Presentation \uf0c1 http://speakerdeck.com/u/anak10thn","title":"Home"},{"location":"#neo-cli","text":"Agnostic Orchestration Tools for Openstack","title":"neo-cli"},{"location":"#installation","text":"","title":"Installation"},{"location":"#python-version","text":"neo-cli only support Python 3 or newer. Don't worry if you don't have Python3 installed. It's save to install Python3 alongside Python2. Both have different installation location. You can get python3 from your distro (GNU/Linux distribution) repository. $ sudo apt-get install python3 Use python3 instead of python when you want to use python3. which help you tell you what program you are using (e.g which python3 )","title":"Python Version"},{"location":"#pip","text":"Get the pip for python3 with the following steps $ curl -O https://bootstrap.pypa.io/get-pip.py $ sudo python3 get-pip.py Then use pip with pip3 . Another way is to get it from your distro repository $ sudo apt-get install python3-pip","title":"pip"},{"location":"#virtual-environments","text":"We strongly recommend using virtual environments to manage dependencies of your project. $ sudo apt-get install python3-venv Make new virtual environments with $ python3 -m venv yourvenvname Active the venv (virtual environments) with $ source yourvenvname/bin/activate Check if it's activated with $ which python3 If the output point to yourvenvname location. Then you are set. Deactivate venv with $ deactivate","title":"Virtual environments"},{"location":"#dependencies","text":"Dependencies are located in requirements.txt Grab those dependencies with $ pip3 install -r requirements.txt","title":"Dependencies"},{"location":"#install-neo-cli","text":"pip3 install -e . Test if NEO installed correctly neo --help If you get the help output from neo. Then you are ready to have fun.","title":"Install neo-cli"},{"location":"#usage","text":"You can list all NEO command with help $ neo --help","title":"Usage"},{"location":"#authentication","text":"Use neo login to log in. neo logout to do the opposite.","title":"Authentication"},{"location":"#creation","text":"$ neo create NEO creates neo.yml for you if it doesn't find one. Then it will guide you trough questions to do the right job for you. It will ask you the 'stack' and 'template' you want to create. Then fill 'key-pairs' and 'network' configuration. The last step is to setup your 'vm' where you are asked to choose 'image name' and 'flavor'. When you sure with the configuration. Hit 'y/yes' to continue to deploy.","title":"Creation"},{"location":"#list-your-stuffs","text":"$ neo ls --help stack List all the stacks vm List all virtual machines network List all network e.g neo ls stack","title":"List your stuffs"},{"location":"#remove-your-stuffs","text":"$ neo rm It will delete your stack, network and machine","title":"Remove your stuffs"},{"location":"#update","text":"$ neo update Use update to see your changes.","title":"Update"},{"location":"#attach","text":"Attach local standard input, output, and error streams to a running stack or virtual machine $ neo attach vm neo attach will read neo.yml configuration automatically if you didn't pass the of your vm. You can also specify your running vm id manually with $ neo attach vm <your-vm-id>","title":"Attach"},{"location":"#troubleshooting","text":"","title":"Troubleshooting"},{"location":"#unable-to-locate-package-python3-venv","text":"Try to check the python3 venv module name provided by your distro $ apt-cache search python3 | grep venv The results python3-venv - pyvenv-3 binary for python3 (default python3 version) python3.5-venv - Interactive high-level object-oriented language (pyvenv binary, version 3.5) It might be differ on your machine. So please make sure you get the correct name.","title":"Unable to locate package python3-venv"},{"location":"#no-command-neo-found","text":"Make sure you virtual environments is activated","title":"No command 'neo' found"},{"location":"#presentation","text":"http://speakerdeck.com/u/anak10thn","title":"Presentation"},{"location":"contributing/","text":"Contributing to neo-cli \uf0c1 We'd be happy for you to contribute to neo-cli. Support questions \uf0c1 Please, don't use the issue tracker for this. Use one of the following resources for questions about your own code: Gitter Project organization \uf0c1 Branch master is always stable and release-ready. Never ever try to submit patch direcly to master Branch dev is for development and merged into master when stable. Feature branches should be created for adding new features and merged into dev when ready. Bug fix branches should be created for fixing bugs and merged into dev when ready. Opening a new issue \uf0c1 Look through existing issues to see if your issue already exists. So we don't have duplicate issue . If your issue already exists, comment on its thread with any information you have. Even if this is simply to note that you are having the same problem, it is still helpful! Always be as descriptive as you can . What is the expected behavior? What is the actual behavior? What are the steps to reproduce? Attach screenshots, videos, GIFs if possible. Include neo-cli version or branch experiencing the issue. Include OS version experiencing the issue. Submitting a pull request \uf0c1 Find an issue to work on, or create a new one. Avoid duplicates, please check existing issues! Fork the repo, or make sure you are synced with the latest changes on dev . Create a new branch with a sweet name: git checkout -b issue_<##>_<description> . Do code. Plese follow PEP8 Please watch your line length . It's advised to limit under 80 char. Write unit tests when applicable. Don't break unit tests or functionality. Update the documentation header comments if needed. Rebase on dev branch and resolve any conflicts before submitting a pull request! Submit a pull request to the dev branch. Make sure to add yourself to AUTHORS.md First time setup \uf0c1 Please refer to instalation guide. Running the tests \uf0c1 You can run the test with your own credentials Run the basic test suite with: pytest You can add more parameter to get more details. pytest --cov=neo -vv -s If your test script get 'aborted' by the server. Try login manually with neo login before running test. Running test coverage \uf0c1 You can generate coverage report with: coverage report -m # or coverage html","title":"Contribution Gude"},{"location":"contributing/#contributing-to-neo-cli","text":"We'd be happy for you to contribute to neo-cli.","title":"Contributing to neo-cli"},{"location":"contributing/#support-questions","text":"Please, don't use the issue tracker for this. Use one of the following resources for questions about your own code: Gitter","title":"Support questions"},{"location":"contributing/#project-organization","text":"Branch master is always stable and release-ready. Never ever try to submit patch direcly to master Branch dev is for development and merged into master when stable. Feature branches should be created for adding new features and merged into dev when ready. Bug fix branches should be created for fixing bugs and merged into dev when ready.","title":"Project organization"},{"location":"contributing/#opening-a-new-issue","text":"Look through existing issues to see if your issue already exists. So we don't have duplicate issue . If your issue already exists, comment on its thread with any information you have. Even if this is simply to note that you are having the same problem, it is still helpful! Always be as descriptive as you can . What is the expected behavior? What is the actual behavior? What are the steps to reproduce? Attach screenshots, videos, GIFs if possible. Include neo-cli version or branch experiencing the issue. Include OS version experiencing the issue.","title":"Opening a new issue"},{"location":"contributing/#submitting-a-pull-request","text":"Find an issue to work on, or create a new one. Avoid duplicates, please check existing issues! Fork the repo, or make sure you are synced with the latest changes on dev . Create a new branch with a sweet name: git checkout -b issue_<##>_<description> . Do code. Plese follow PEP8 Please watch your line length . It's advised to limit under 80 char. Write unit tests when applicable. Don't break unit tests or functionality. Update the documentation header comments if needed. Rebase on dev branch and resolve any conflicts before submitting a pull request! Submit a pull request to the dev branch. Make sure to add yourself to AUTHORS.md","title":"Submitting a pull request"},{"location":"contributing/#first-time-setup","text":"Please refer to instalation guide.","title":"First time setup"},{"location":"contributing/#running-the-tests","text":"You can run the test with your own credentials Run the basic test suite with: pytest You can add more parameter to get more details. pytest --cov=neo -vv -s If your test script get 'aborted' by the server. Try login manually with neo login before running test.","title":"Running the tests"},{"location":"contributing/#running-test-coverage","text":"You can generate coverage report with: coverage report -m # or coverage html","title":"Running test coverage"},{"location":"kubernetes/","text":"Deploy Kubernetes \uf0c1 $ neo create kubernetes Dashboard \uf0c1 Tunneling \uf0c1 $ neo attach -t 8001:127.0.0.1:8001 [k8s@k8s-test-controller-2hojdpb5a22a ~]$ kube-token Name: admin-user-token-qt8dr Namespace: kube-system Labels: <none> Annotations: kubernetes.io/service-account.name=admin-user kubernetes.io/service-account.uid=1dc769a0-4679-11e8-829f-fa163ebedac7 Type: kubernetes.io/service-account-token Data ==== ca.crt: 1090 bytes namespace: 11 bytes token: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLXF0OGRyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIxZGM3NjlhMC00Njc5LTExZTgtODI5Zi1mYTE2M2ViZWRhYzciLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.XdWFIA49ckETvBSEA [k8s@k8s-test-controller-2hojdpb5a22a ~]$ kubectl proxy Starting to serve on 127.0.0.1:8001 open url http://127.0.0.1:8001 and then login with your token access Create simple user \uf0c1 In this guide, we will find out how to create a new user using Service Account mechanism of Kubernetes, grant this user admin permissions and log in to Dashboard using bearer token tied to this user. Copy provided snippets to some xxx.yaml file and use kubectl create -f xxx.yaml to create them. Create Service Account \uf0c1 We are creating Service Account with name admin-user in namespace kube-system first. apiVersion: v1 kind: ServiceAccount metadata: name: admin-user namespace: kube-system Create ClusterRoleBinding \uf0c1 In most cases after provisioning our cluster using kops or kubeadm or any other popular tool admin Role already exists in the cluster. We can use it and create only RoleBinding for our ServiceAccount . NOTE : apiVersion of ClusterRoleBinding resource may differ between Kubernetes versions. Starting from v1.8 it was promoted to rbac.authorization.k8s.io/v1 . apiVersion: rbac.authorization.k8s.io/v1beta1 kind: ClusterRoleBinding metadata: name: admin-user roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: admin-user namespace: kube-system Bearer Token \uf0c1 Now we need to find token we can use to log in. Execute following command: kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}') It should print something like: Name: admin-user-token-6gl6l Namespace: kube-system Labels: <none> Annotations: kubernetes.io/service-account.name=admin-user kubernetes.io/service-account.uid=b16afba9-dfec-11e7-bbb9-901b0e532516 Type: kubernetes.io/service-account-token Data ==== ca.crt: 1025 bytes namespace: 11 bytes token: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLTZnbDZsIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJiMTZhZmJhOS1kZmVjLTExZTctYmJiOS05MDFiMGU1MzI1MTYiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.M70CU3lbu3PP4OjhFms8PVL5pQKj-jj4RNSLA4YmQfTXpPUuxqXjiTf094_Rzr0fgN_IVX6gC4fiNUL5ynx9KU-lkPfk0HnX8scxfJNzypL039mpGt0bbe1IXKSIRaq_9VW59Xz-yBUhycYcKPO9RM2Qa1Ax29nqNVko4vLn1_1wPqJ6XSq3GYI8anTzV8Fku4jasUwjrws6Cn6_sPEGmL54sq5R4Z5afUtv-mItTmqZZdxnkRqcJLlg2Y8WbCPogErbsaCDJoABQ7ppaqHetwfM_0yMun6ABOQbIwwl8pspJhpplKwyo700OSpvTT9zlBsu-b35lzXGBRHzv5g_RA Now copy the token and paste it into Enter token field on log in screen. Click Sign in button and that's it. You are now logged in as an admin. In order to find out more about how to grant/deny permissions in Kubernetes read official authentication & authorization documentation.","title":"Deploy Kubernetes"},{"location":"kubernetes/#deploy-kubernetes","text":"$ neo create kubernetes","title":"Deploy Kubernetes"},{"location":"kubernetes/#dashboard","text":"","title":"Dashboard"},{"location":"kubernetes/#tunneling","text":"$ neo attach -t 8001:127.0.0.1:8001 [k8s@k8s-test-controller-2hojdpb5a22a ~]$ kube-token Name: admin-user-token-qt8dr Namespace: kube-system Labels: <none> Annotations: kubernetes.io/service-account.name=admin-user kubernetes.io/service-account.uid=1dc769a0-4679-11e8-829f-fa163ebedac7 Type: kubernetes.io/service-account-token Data ==== ca.crt: 1090 bytes namespace: 11 bytes token: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLXF0OGRyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIxZGM3NjlhMC00Njc5LTExZTgtODI5Zi1mYTE2M2ViZWRhYzciLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.XdWFIA49ckETvBSEA [k8s@k8s-test-controller-2hojdpb5a22a ~]$ kubectl proxy Starting to serve on 127.0.0.1:8001 open url http://127.0.0.1:8001 and then login with your token access","title":"Tunneling"},{"location":"kubernetes/#create-simple-user","text":"In this guide, we will find out how to create a new user using Service Account mechanism of Kubernetes, grant this user admin permissions and log in to Dashboard using bearer token tied to this user. Copy provided snippets to some xxx.yaml file and use kubectl create -f xxx.yaml to create them.","title":"Create simple user"},{"location":"kubernetes/#create-service-account","text":"We are creating Service Account with name admin-user in namespace kube-system first. apiVersion: v1 kind: ServiceAccount metadata: name: admin-user namespace: kube-system","title":"Create Service Account"},{"location":"kubernetes/#create-clusterrolebinding","text":"In most cases after provisioning our cluster using kops or kubeadm or any other popular tool admin Role already exists in the cluster. We can use it and create only RoleBinding for our ServiceAccount . NOTE : apiVersion of ClusterRoleBinding resource may differ between Kubernetes versions. Starting from v1.8 it was promoted to rbac.authorization.k8s.io/v1 . apiVersion: rbac.authorization.k8s.io/v1beta1 kind: ClusterRoleBinding metadata: name: admin-user roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: admin-user namespace: kube-system","title":"Create ClusterRoleBinding"},{"location":"kubernetes/#bearer-token","text":"Now we need to find token we can use to log in. Execute following command: kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}') It should print something like: Name: admin-user-token-6gl6l Namespace: kube-system Labels: <none> Annotations: kubernetes.io/service-account.name=admin-user kubernetes.io/service-account.uid=b16afba9-dfec-11e7-bbb9-901b0e532516 Type: kubernetes.io/service-account-token Data ==== ca.crt: 1025 bytes namespace: 11 bytes token: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLTZnbDZsIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJiMTZhZmJhOS1kZmVjLTExZTctYmJiOS05MDFiMGU1MzI1MTYiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.M70CU3lbu3PP4OjhFms8PVL5pQKj-jj4RNSLA4YmQfTXpPUuxqXjiTf094_Rzr0fgN_IVX6gC4fiNUL5ynx9KU-lkPfk0HnX8scxfJNzypL039mpGt0bbe1IXKSIRaq_9VW59Xz-yBUhycYcKPO9RM2Qa1Ax29nqNVko4vLn1_1wPqJ6XSq3GYI8anTzV8Fku4jasUwjrws6Cn6_sPEGmL54sq5R4Z5afUtv-mItTmqZZdxnkRqcJLlg2Y8WbCPogErbsaCDJoABQ7ppaqHetwfM_0yMun6ABOQbIwwl8pspJhpplKwyo700OSpvTT9zlBsu-b35lzXGBRHzv5g_RA Now copy the token and paste it into Enter token field on log in screen. Click Sign in button and that's it. You are now logged in as an admin. In order to find out more about how to grant/deny permissions in Kubernetes read official authentication & authorization documentation.","title":"Bearer Token"},{"location":"neo-dsl/","text":"neo DSL \uf0c1 Structure \uf0c1 <category>: <name_entity>: parameters: <parameter_1_key> : <paramater_1_value> <parameter_2_key> : <paramater_2_value> template: <template> Templates \uf0c1 Cluster \uf0c1 Kubernetes \uf0c1 parameters : key value requirement description image string no - controller_flavor string no - master_flavor string yes - worker_flavor string yes - public_network string no - master_size number yes - worker_size number yes - private_network string yes - example : clusters: neo-k8s: template: \"kubernetes\" parameters: master_flavor: SS2.1 worker_flavor: SS2.1 master_size: 1 worker_size: 1 deploy: - clusters.neo-k8s Networks \uf0c1 Private (Private network) \uf0c1 parameters : key value requirement description gateway string (example :192.168.0.1) yes - cidr string (example :192.168.0.0/24) yes - dns string (example :8.8.8.8) no - Instances \uf0c1 vm (Virtual Machine) \uf0c1 parameters : key value requirement description private_network string yes - key_name string yes - image string yes - flavor string yes - username string yes - example : deploy: - others.key-coba - networks.neowork-coba - instances.vm-coba instances: vm-coba: parameters: flavor: SS2.1 image: CentOS 7.3 key_name: key-coba private_network: neowork-coba username: ibnu template: vm networks: neowork-coba: parameters: cidr: 192.168.3.0/24 gateway: 192.168.3.1 template: private others: key-coba: template: key-pairs plesk (Plesk Bundle) \uf0c1 parameters : key value requirement default value description private_network string yes - - key_name string yes - - image string yes Image-Plesk-Bundle-1.0 - flavor string yes - - username string yes - - email string yes - - password string yes - - activation_key string yes - - floating_desc string no PLSK set description to floating ip neo_type {\"metadata\": {\"neo_type\": }} no {\"metadata\": {\"neo_type\": \"PLSK\"}} add metadata to neo vm package enum(wordpress, business) no wordpress add metadata to neo vm Others \uf0c1 key_pairs \uf0c1 parameters : no parameters","title":"neo DSL"},{"location":"neo-dsl/#neo-dsl","text":"","title":"neo DSL"},{"location":"neo-dsl/#structure","text":"<category>: <name_entity>: parameters: <parameter_1_key> : <paramater_1_value> <parameter_2_key> : <paramater_2_value> template: <template>","title":"Structure"},{"location":"neo-dsl/#templates","text":"","title":"Templates"},{"location":"neo-dsl/#cluster","text":"","title":"Cluster"},{"location":"neo-dsl/#kubernetes","text":"parameters : key value requirement description image string no - controller_flavor string no - master_flavor string yes - worker_flavor string yes - public_network string no - master_size number yes - worker_size number yes - private_network string yes - example : clusters: neo-k8s: template: \"kubernetes\" parameters: master_flavor: SS2.1 worker_flavor: SS2.1 master_size: 1 worker_size: 1 deploy: - clusters.neo-k8s","title":"Kubernetes"},{"location":"neo-dsl/#networks","text":"","title":"Networks"},{"location":"neo-dsl/#private-private-network","text":"parameters : key value requirement description gateway string (example :192.168.0.1) yes - cidr string (example :192.168.0.0/24) yes - dns string (example :8.8.8.8) no -","title":"Private (Private network)"},{"location":"neo-dsl/#instances","text":"","title":"Instances"},{"location":"neo-dsl/#vm-virtual-machine","text":"parameters : key value requirement description private_network string yes - key_name string yes - image string yes - flavor string yes - username string yes - example : deploy: - others.key-coba - networks.neowork-coba - instances.vm-coba instances: vm-coba: parameters: flavor: SS2.1 image: CentOS 7.3 key_name: key-coba private_network: neowork-coba username: ibnu template: vm networks: neowork-coba: parameters: cidr: 192.168.3.0/24 gateway: 192.168.3.1 template: private others: key-coba: template: key-pairs","title":"vm (Virtual Machine)"},{"location":"neo-dsl/#plesk-plesk-bundle","text":"parameters : key value requirement default value description private_network string yes - - key_name string yes - - image string yes Image-Plesk-Bundle-1.0 - flavor string yes - - username string yes - - email string yes - - password string yes - - activation_key string yes - - floating_desc string no PLSK set description to floating ip neo_type {\"metadata\": {\"neo_type\": }} no {\"metadata\": {\"neo_type\": \"PLSK\"}} add metadata to neo vm package enum(wordpress, business) no wordpress add metadata to neo vm","title":"plesk (Plesk Bundle)"},{"location":"neo-dsl/#others","text":"","title":"Others"},{"location":"neo-dsl/#key_pairs","text":"parameters : no parameters","title":"key_pairs"}]}